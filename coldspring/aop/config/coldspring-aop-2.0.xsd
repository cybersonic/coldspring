<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
   Copyright 2010 Mark Mandel
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
       http://www.apache.org/licenses/LICENSE-2.0
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 -->
<xsd:schema xmlns="http://www.coldspringframework.org/schema/aop"
		xmlns:xsd="http://www.w3.org/2001/XMLSchema"
		targetNamespace="http://www.coldspringframework.org/schema/aop"
		elementFormDefault="qualified"
		attributeFormDefault="unqualified">

	<xsd:annotation>
		<xsd:documentation><![CDATA[
	Credits to the Spring XML AOP Schema, version 2.5, on which this is heavily based, and much
	of the documentation and schema code was lifted.		
		
	Defines the configuration elements for the ColdSpring Framework's AOP support.
		]]></xsd:documentation>
	</xsd:annotation>

	<xsd:element name="config">
		<xsd:annotation>
			<xsd:documentation><![CDATA[
	A section (compartmentalization) of AOP-specific configuration (including
	aspects, pointcuts, etc).
			]]></xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="pointcut" type="pointcutType" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
	A named pointcut definition.
						]]></xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="advisor" type="advisorType" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation source="coldfusion:coldspring.aop.Advisor"><![CDATA[
	A named advisor definition.
						]]></xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="aspect" type="aspectType" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
	A named aspect definition.
						]]></xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>

    <xsd:element name="remote">
        <xsd:annotation>
            <xsd:documentation source="cfc:coldspring.aop.framework.RemoteFactoryBean"><![CDATA[
    Configuration of a generated CFC that exposes a given set of methods froma specific bean, as remote,
    to be consumed as a SOAP / REST WebService, or as Flash Remoting.
            ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="remote-methods" type="methods" maxOccurs="1" minOccurs="0">
                    <xsd:annotation>
                        <xsd:documentation><![CDATA[
            List of the method names you want to expose as remote. '*' can be used as a special case wildcard
            meaning that all methods on the target bean will be exposed as remote.
            You can also use the attribute "remote-methods" to define this as well.
                        ]]></xsd:documentation>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="missing-methods" type="methods" maxOccurs="1" minOccurs="0">
                    <xsd:annotation>
                       <xsd:documentation><![CDATA[
           List of of non-existent methods that are to be implemented as remote methods on the remote facade.
           You can also use the attribute "missing-methods" to define this as well.
                       ]]></xsd:documentation>
                   </xsd:annotation>
                </xsd:element>
                <xsd:element name="interceptors" maxOccurs="1" minOccurs="0">
                    <xsd:annotation>
                        <xsd:documentation>
                List of Advice/Advisor bean names to be applied to the target components.
                You can also use the attribute "interceptor-names" to define this as well.
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="interceptor" maxOccurs="unbounded" minOccurs="0">
                                <xsd:complexType>
                                    <xsd:attribute name="ref" type="xsd:string" use="required">
                                        <xsd:annotation>
                                            <xsd:documentation>
                                    The id of the advice/advisor bean to apply.
                                            </xsd:documentation>
                                        </xsd:annotation>
                                    </xsd:attribute>
                                </xsd:complexType>
                            </xsd:element>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </xsd:sequence>

            <xsd:attribute name="id" type="xsd:ID" use="required">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
            The unique identifier for the underlying RemoteFactoryBean.
                    ]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="target-ref" type="xsd:string" use="required">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
        The name of the bean that will have it's methods exposed as being remote.
                    ]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="trusted-source" type="xsd:string" use="optional" default="false">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
        Whether or not the generated code is trusted. If true, the remoting component will not be regenerated if it already exists.
                    ]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="service-name" type="xsd:string" use="required">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
        The name of the ColdFusion Component that is generated as the remote access to the underlying target component.
                    ]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="relative-path" type="xsd:string" use="required">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
        The relative path to the directory in which the generated component will be generated.
                    ]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>

            <xsd:attribute name="bean-factory-name" type="xsd:string" use="optional">
                <xsd:annotation>
                    <xsd:documentation>
            Set the bame of the bean factory to be used in the application scope
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>

            <xsd:attribute name="remote-methods" type="xsd:string" use="optional">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
        Comma delimeted list of the method names you want to expose as remote. '*' can be used as a special case wildcard
        meaning that all methods on the target bean will be exposed as remote.
        You can also use the <aop:remote-methods /> element to define this as well.
                    ]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="missing-methods" type="xsd:string" use="optional">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
        Comma delimeted list of non-existent methods that are to be implemented as remote methods on the remote facade.
        You can also use the <aop:missing-methods> element to define this as well.
                    ]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="interceptor-refs" type="xsd:string" use="optional">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
        Comma delimeted list of Advice/Advisor bean ids to be applied to the target components.
        You can also use the <aop:interceptors> elements to define this as well.
                    ]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>

        </xsd:complexType>
    </xsd:element>

	<xsd:complexType name="aspectType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="pointcut" type="pointcutType">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
	A named pointcut definition.
					]]></xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="before" type="basicAdviceType">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
	A before advice definition.
					]]></xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="after-returning" type="afterReturningAdviceType">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
	An after-returning advice definition.
					]]></xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="after-throwing" type="afterThrowingAdviceType">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
	An after-throwing advice definition.
					]]></xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="around" type="basicAdviceType">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
	An around advice definition.
					]]></xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:choice>
		<xsd:attribute name="ref" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
	The name of the (backing) bean that encapsulates the aspect.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="pointcutType">
		<xsd:attribute name="id" type="xsd:ID" use="required">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
	The unique identifier for a pointcut.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="expression" use="required" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
	The pointcut expression.
	
	For example : 'execution(* com.xyz.myapp.service.*.*(..))'
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="basicAdviceType">
		<xsd:attribute name="id" type="xsd:ID">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
	The unique identifier for an aspect.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>	
		<xsd:attribute name="pointcut" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
	The associated pointcut expression.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="pointcut-ref" type="pointcutRefType">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
	The name of an associated pointcut definition.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="method" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
	The name of the method that defines the logic of the advice.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="autoproxy" type="xsd:boolean" default="true">
			<xsd:annotation>
				<xsd:documentation>
					By default all defined Advisors are matched against all beans in the bean factory, and if they do match
					the Advice is applied. If you do not want this to happen, e.g. if you are creating advice for a RemoteProxyBeanFactory
					set this to default, and it won't be eligable for autoproxying.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>		
	</xsd:complexType>

	<xsd:complexType name="afterReturningAdviceType">
		<xsd:complexContent>
			<xsd:extension base="basicAdviceType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="afterThrowingAdviceType">
		<xsd:complexContent>
			<xsd:extension base="basicAdviceType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

    <xsd:complexType name="methods">
        <xsd:annotation>
            <xsd:documentation>
    List of method names
            </xsd:documentation>
        </xsd:annotation>
            <xsd:sequence>
                <xsd:sequence>
                    <xsd:element name="method" maxOccurs="unbounded" minOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                    Define the method you want
                            </xsd:documentation>
                        </xsd:annotation>
                        <xsd:complexType>
                            <xsd:attribute name="name" use="required">
                                <xsd:annotation>
                                    <xsd:documentation>
                            The name of the method.
                                    </xsd:documentation>
                                </xsd:annotation>
                            </xsd:attribute>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:sequence>
            </xsd:sequence>
    </xsd:complexType>

	<xsd:complexType name="advisorType">
		<xsd:attribute name="id" type="xsd:ID"/>
		<xsd:attribute name="advice-ref" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
	A reference to an advice bean.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="pointcut" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
	A pointcut expression.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="pointcut-ref" type="pointcutRefType">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
	A reference to a pointcut definition.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="autoproxy" type="xsd:boolean" default="true">
			<xsd:annotation>
				<xsd:documentation>
					By default all defined Advisors are matched against all beans in the bean factory, and if they do match
					the Advice is applied. If you do not want this to happen, e.g. if you are creating advice for a RemoteProxyBeanFactory
					set this to default, and it won't be eligable for autoproxying.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:simpleType name="pointcutRefType">
		<xsd:union memberTypes="xsd:string"/>
	</xsd:simpleType>

</xsd:schema>
